# This workflow will build and push a Docker container to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-custom-container?tabs=dotnet&pivots=container-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Create a GitHub Personal access token with "repo" and "read:packages" permissions.
#
# 4. Create three app settings on your Azure Web app:
#       DOCKER_REGISTRY_SERVER_URL: Set this to "https://ghcr.io"
#       DOCKER_REGISTRY_SERVER_USERNAME: Set this to the GitHub username or organization that owns the repository
#       DOCKER_REGISTRY_SERVER_PASSWORD: Set this to the value of your PAT token from the previous step
#
# 5. Change the value for the AZURE_WEBAPP_NAME.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy a container to an Azure Web App

env:
  AZURE_WEBAPP_NAME: djangoproject  # set this to the name of your Azure Web App

on:
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log in to GitHub container registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Create Dockerfile with secrets
        run: |
          cat <<EOF > Dockerfile
          # Use an official Python runtime as a parent image
          FROM python:3.11.5

          # Set environment variables for Python
          ENV PYTHONUNBUFFERED 1
          ENV PYTHONDONTWRITEBYTECODE 1

          # Database settings
          ENV DB_ENGINE='${{ secrets.DB_ENGINE }}'
          ENV DB_NAME='${{ secrets.DB_NAME }}'
          ENV DB_USER='${{ secrets.DB_USER }}'
          ENV DB_PASSWORD='${{ secrets.DB_PASSWORD }}'
          ENV DB_HOST='${{ secrets.DB_HOST }}'
          ENV DB_PORT='${{ secrets.DB_PORT }}'

          # Storage settings
          ENV DEFAULT_FILE_STORAGE='${{ secrets.DEFAULT_FILE_STORAGE }}'
          ENV AZURE_ACCOUNT_NAME='${{ secrets.AZURE_ACCOUNT_NAME }}'
          ENV AZURE_ACCOUNT_KEY='${{ secrets.AZURE_ACCOUNT_KEY }}'
          ENV AZURE_CONTAINER='${{ secrets.AZURE_CONTAINER }}'

          # Django settings
          ENV SECRET_KEY="your_secret_key"
          ENV DEBUG="your_debug_value"

          # Create and set the working directory
          WORKDIR /rumosproject

          # Copy the requirements file into the container
          COPY requirements.txt .

          # Install pip and any needed dependencies in requirements.txt
          RUN pip install --upgrade pip
          RUN pip install -r requirements.txt

          # Copy project
          COPY . .

          # Apply database migrations
          RUN python manage.py makemigrations website
          RUN python manage.py migrate

          # Expose port 80, default HTTP port
          EXPOSE 80

          CMD ["gunicorn", "core.wsgi:application", "--bind", "0.0.0.0:80"]
          EOF
        working-directory: ${{ github.workspace }}

      - name: Build and push container image to registry
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          push: true
          tags: ghcr.io/${{ env.REPO }}:${{ github.sha }}
          file: ./Dockerfile

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: 'ghcr.io/${{ env.REPO }}:${{ github.sha }}'
